import silla.*
import sesion.*
import ingredientes.*
import coctelera.*
import cliente.*
import barman.*
import tragos.*
import config.*

import wollok.game.*

//LOS INGREDIENTES ESTAN INSTANCIADOS
// Clientes -> position? deberia pasar la misma posision de la silla...
const silla = new SillaParaTest(position = game.origin())
const clienteConformista = new ClienteConformista(silla = silla)
const clienteMedio = new ClienteMedio(silla = silla)
const clienteExigente = new ClienteExigente(silla = silla)

// Comienzan los tests sobre las Sillas
describe "Sillas" {
	
	test "evaluarEstado() sin cliente y con 100% de probabilidades, debe generar cliente" {
		assert.notThat(silla.estaOcupada())
		
		silla.evaluarEstado()
		
		assert.that(silla.cliente().toString().contains("un/a  Cliente"))
	}
	
	test "Si la silla ya tiene un cliente, evaluarEstado() conserva el mismo cliente" {
		
		silla.evaluarEstado()
		
		const cliente = silla.cliente()
		
		silla.evaluarEstado()
		
		assert.that(silla.cliente() === cliente)
	}
	
	test "retirarCliente()" {		
		silla.evaluarEstado()	
		assert.that(silla.cliente().toString().contains("un/a  Cliente"))
		
		silla.retirarCliente()		
		assert.notThat(silla.estaOcupada())
	}
}

describe "Sesion" {
	test "Al iniciarse, todas sus sillas deben iniciarse y tener un cliente random" {
		const sesion = new SesionParaTest()
		
		sesion.iniciar()
		
		assert.equals(sesion.sillas().size(), 4)
	}
	
	test "Las sesiones deben comenzar siempre con el objetivo no cumplido" {
		const sesion = new SesionParaTest()
		sesion.iniciar()
		
		assert.notThat(sesion.objetivoCumplido())
	}
	
	test "Control del reloj: debe restar un segundo y remover al barman cuando se cumple el objetivo" {
		const sesion = new SesionParaTest()
		sesion.iniciar()
		sesion.controlReloj()
		
		assert.equals(sesion.tiempoRestante(), sesion.tiempoInicial() - 1)
		assert.that(game.allVisuals().contains(barmanParaTest))
		
		propinero.dinero(sesion.propinaObjetivo())
		sesion.controlReloj()
		
		assert.notThat(game.allVisuals().contains(barmanParaTest))
	}
}

describe "Coctelera" {
	method initialize(){
		game.clear()
		const sesion = new SesionParaTest()
		sesion.iniciar()
	}
 	test "Agregar Ingredientes - 8 maximo" {//para mas de 8 OTRO TEST
 		assert.equals(0, cocteleraParaTest.ingredientes().size())
 		cocteleraParaTest.agregarIngredientes(naranja)
 		assert.equals(1, cocteleraParaTest.ingredientes().size())
 		cocteleraParaTest.agregarIngredientes(limon)
 		assert.equals(2, cocteleraParaTest.ingredientes().size())
 		cocteleraParaTest.agregarIngredientes(cola)
 		assert.equals(3, cocteleraParaTest.ingredientes().size())
 		cocteleraParaTest.agregarIngredientes(naranja)
 		assert.equals(4, cocteleraParaTest.ingredientes().size())
 		cocteleraParaTest.agregarIngredientes(limon)
 		assert.equals(5, cocteleraParaTest.ingredientes().size())
 		cocteleraParaTest.agregarIngredientes(cola)
 		assert.equals(6, cocteleraParaTest.ingredientes().size())
 		cocteleraParaTest.agregarIngredientes(naranja)
 		assert.equals(7, cocteleraParaTest.ingredientes().size())
		cocteleraParaTest.agregarIngredientes(naranja)
 		assert.equals(8, cocteleraParaTest.ingredientes().size())
 	}
 	
 	test "Exceso de ingredientes. Se limpia al agregar el 9no ingrediente"{
 		cocteleraParaTest.agregarIngredientes(naranja)
 		cocteleraParaTest.agregarIngredientes(limon)
 		cocteleraParaTest.agregarIngredientes(cola)
 		cocteleraParaTest.agregarIngredientes(tomate)
 		cocteleraParaTest.agregarIngredientes(whisky)
 		cocteleraParaTest.agregarIngredientes(vodka)
 		cocteleraParaTest.agregarIngredientes(fernulo)
 		cocteleraParaTest.agregarIngredientes(ron)
 		assert.equals(8, cocteleraParaTest.ingredientes().size())
 		cocteleraParaTest.agregarIngredientes(ron)
 		assert.equals(0, coctelera.ingredientes().size())
 	}
 	
 	test "Limpiar manualmente" {
 		cocteleraParaTest.agregarIngredientes(naranja)
 		cocteleraParaTest.agregarIngredientes(limon)
 		assert.equals(2, cocteleraParaTest.ingredientes().size())
 		cocteleraParaTest.limpiar()
 		assert.that(cocteleraParaTest.ingredientes().isEmpty())
 	}
 	
 	test "Verificar ingredientes agregados" {
 		cocteleraParaTest.agregarIngredientes(naranja)
 		cocteleraParaTest.agregarIngredientes(limon)
 		assert.equals([naranja, limon], cocteleraParaTest.ingredientes())
 	}
 	
}

describe "cliente"{
 	test "cliente conformista"{
 		//inicio
 		assert.equals(45,clienteConformista.tiempoEspera()) 
 		assert.equals(3,clienteConformista.satisfaccion())
 		assert.equals(null, clienteConformista.tragoPedido())
 		
 		//pide un fernet
 		clienteConformista.generarTrago(fernCola)
 		assert.equals(fernCola, clienteConformista.tragoPedido())
 		
 		//recibe fernet y lo verigica 
 		assert.that(clienteConformista.verificarTrago(fernCola))
 		//recibe fernetCordobes
 		assert.that(clienteConformista.verificarTrago(fernCordobes))
 		//recibe manhattan
 		assert.notThat(clienteConformista.verificarTrago(manhattan))
 		
 		//recibe un trago por la mitad
 		const otroTrago = new Trago(ingredientes = [fernulo,fernulo,naranja, naranja, naranja, ron])
 		assert.notThat(clienteConformista.vasoLleno(otroTrago))
 		//recibe un trago por completo
 		const otroOtroTrago = new Trago(ingredientes = [fernulo,fernulo,naranja, naranja, naranja, ron, ron, ron])
 		assert.that(clienteConformista.vasoLleno(otroOtroTrago))
 		
 	}
 	
 	test "cliente medio"{
 		//inicio
 		assert.equals(30,clienteMedio.tiempoEspera())
 		assert.equals(3,clienteMedio.satisfaccion())
 		assert.equals(null, clienteMedio.tragoPedido())
 		
 		//pide un fernet
 		clienteMedio.generarTrago(fernCola)
 		assert.equals(fernCola, clienteMedio.tragoPedido())
 		
 		//recibe fernet y lo verigica 
 		assert.that(clienteMedio.verificarTrago(fernCola))
 		//recibe fernetCordobes
 		assert.that(clienteMedio.verificarTrago(fernCordobes))
 		//recibe manhattan
 		assert.notThat(clienteMedio.verificarTrago(manhattan))
 		
 		//recibe otro trago
 		const otroTrago = new Trago(ingredientes = [fernulo,fernulo,fernulo, fernulo, ron, ron, ron, naranja])
		const reciboTragoCambio = new Trago(ingredientes = [fernulo,fernulo,fernulo, fernulo, fernulo, ron, ron, naranja])
		const reciboTragoCambio2 = new Trago(ingredientes = [fernulo,fernulo,fernulo, fernulo, fernulo, fernulo, ron, ron])
		const reciboTragoCambio3 = new Trago(ingredientes = [fernulo,fernulo,fernulo, ron, ron, ron, naranja, naranja])
		clienteMedio.generarTrago(otroTrago)
		assert.that(clienteMedio.verificarTrago(otroTrago))
		assert.that(clienteMedio.verificarTrago(reciboTragoCambio))
		assert.notThat(clienteMedio.verificarTrago(reciboTragoCambio2))
		assert.that(clienteMedio.verificarTrago(reciboTragoCambio3))

 	}
 	
 	test "cliente exigente"{
 		//inicio
 		assert.equals(16,clienteExigente.tiempoEspera()) 
 		assert.equals(3,clienteExigente.satisfaccion())
 		assert.equals(null, clienteExigente.tragoPedido())
 		
 		//pide un fernet
 		clienteExigente.generarTrago(fernCola)
 		assert.equals(fernCola, clienteExigente.tragoPedido())
 		
 		//ordenar trago que pidio
 		//fernCola = [fernulo, fernulo, fernulo, cola, cola, cola, cola, cola]
 		assert.notEquals([fernulo, fernulo, fernulo, cola, cola, cola, cola, cola],clienteExigente.ordenarTragoPedido())
 		assert.equals([cola, cola, cola, cola, cola, fernulo, fernulo, fernulo],clienteExigente.ordenarTragoPedido())
 		
 		//ordenar trago que recibio
 		//fernCola = [fernulo, fernulo, fernulo, cola, cola, cola, cola, cola]
		assert.notEquals([fernulo, fernulo, fernulo, cola, cola, cola, cola, cola],clienteExigente.ordenarTragoRecibido(fernCola))
 		assert.equals([cola, cola, cola, cola, cola, fernulo, fernulo, fernulo],clienteExigente.ordenarTragoRecibido(fernCola))
				 		
 		//recibe fernet y lo verigica
 		assert.that(clienteExigente.verificarTrago(fernCola))
 		//recibe fernetCordobes
 		assert.notThat(clienteExigente.verificarTrago(fernCordobes))
 		//recibe manhattan
 		assert.notThat(clienteExigente.verificarTrago(manhattan))
 		
 		//recibe otro trago
 		const otroTrago = new Trago(ingredientes = [fernulo,fernulo,naranja, naranja, naranja, ron, ron, ron])
		const otroTragoCambio = new Trago(ingredientes = [fernulo,naranja,naranja, naranja, naranja, ron, ron, ron])
		
		clienteExigente.generarTrago(otroTrago)
		assert.notThat(clienteExigente.verificarTrago(otroTragoCambio))
		
 	}
 	
}

describe "barman"{
	method initialize(){
		game.clear()
		const sesion = new SesionParaTest()
		sesion.iniciar()
	}
	method prepararFernet(){
		barmanParaTest.izquierda()
		barmanParaTest.izquierda()
		barmanParaTest.seleccionar()
		barmanParaTest.seleccionar()
		barmanParaTest.seleccionar()
		barmanParaTest.izquierda()
		barmanParaTest.izquierda()
		barmanParaTest.izquierda()
		barmanParaTest.seleccionar()
		barmanParaTest.seleccionar()
		barmanParaTest.seleccionar()
		barmanParaTest.seleccionar()
		barmanParaTest.seleccionar()
		
	}
	//RECORDAR: 
	//En sesion=> const property ingredientes = [limon, naranja, tomate, cola, whisky, vodka, fernulo, ron]
	//barman comienza seleccionando limon por default
	test "Seleccion de barman a derecha. Si se pasa, vuelve al principio"{
		self.initialize()
		assert.equals(limon.position(), barmanParaTest.position())
		barmanParaTest.derecha()
		assert.equals(naranja.position(), barmanParaTest.position())
		barmanParaTest.derecha()
		assert.equals(tomate.position(), barmanParaTest.position())
		barmanParaTest.derecha()
		assert.equals(cola.position(), barmanParaTest.position())
		barmanParaTest.derecha()
		assert.equals(whisky.position(), barmanParaTest.position())
		barmanParaTest.derecha()
		assert.equals(vodka.position(), barmanParaTest.position())
		barmanParaTest.derecha()
		assert.equals(fernulo.position(), barmanParaTest.position())
		barmanParaTest.derecha()
		assert.equals(ron.position(), barmanParaTest.position())
		barmanParaTest.derecha()
		assert.equals(limon.position(), barmanParaTest.position())
		barmanParaTest.derecha()
	}
	
	test "Seleccion de barman a izquierda"{
		self.initialize()
		assert.equals(limon.position(), barmanParaTest.position())
		barmanParaTest.izquierda()
		assert.equals(ron.position(), barmanParaTest.position())
		barmanParaTest.izquierda()
		assert.equals(fernulo.position(), barmanParaTest.position())
		barmanParaTest.izquierda()
		assert.equals(vodka.position(), barmanParaTest.position())
		barmanParaTest.izquierda()
		assert.equals(whisky.position(), barmanParaTest.position())
		barmanParaTest.izquierda()
		assert.equals(cola.position(), barmanParaTest.position())
		barmanParaTest.izquierda()
		assert.equals(tomate.position(), barmanParaTest.position())
		barmanParaTest.izquierda()
		assert.equals(naranja.position(), barmanParaTest.position())
		barmanParaTest.izquierda()
		assert.equals(limon.position(), barmanParaTest.position())
	}
	
	test "Seleccion de barman intercalada"{
		self.initialize()
		assert.equals(limon.position(), barmanParaTest.position())
		barmanParaTest.izquierda()
		assert.equals(ron.position(), barmanParaTest.position())
		barmanParaTest.izquierda()
		assert.equals(fernulo.position(), barmanParaTest.position())
		barmanParaTest.derecha()
		assert.equals(ron.position(), barmanParaTest.position())
		barmanParaTest.derecha()
		assert.equals(limon.position(), barmanParaTest.position())
	}
	
	test "Barman sirve en la coctelera"{//
		self.initialize()
		assert.equals(limon.position(), barmanParaTest.position())
		barmanParaTest.seleccionar()
		assert.equals([limon], cocteleraParaTest.ingredientes())
	}
	
	test "Barman prepara trago.Se llena y vacia la coctelera"{//
		self.initialize()
		self.prepararFernet()
		assert.equals([fernulo, fernulo, fernulo, cola, cola, cola, cola, cola], cocteleraParaTest.ingredientes())
		const tragoTest = cocteleraParaTest.preparado()
		assert.equals(tragoTest.ingredientes(), cocteleraParaTest.ingredientes())
		barmanParaTest.seleccionar()//llena uno de mas, se revalsa y vacia la coctelera
		assert.that(cocteleraParaTest.ingredientes().isEmpty())
	}
	
	test "Prepara trago, lo entrega y el propinero recibe dinero"{//
		game.clear()
		const sesion = new SesionParaTest()
		sesion.iniciar()
		const cliente = new ClienteConformista(silla = sesion.sillas().get(0), tragoPedido=fernCola)
		self.prepararFernet()
		barmanParaTest.entregar(cliente.silla())
		assert.that(cocteleraParaTest.ingredientes().isEmpty())
		assert.notEquals(0, propinero.dinero())
	}
}
