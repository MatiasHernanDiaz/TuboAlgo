import silla.*
import sesion.*
import ingredientes.*
import coctelera.*
import cliente.*
import barman.*
import tragos.*

import wollok.game.*

// Ingredientes
//const naranja = new Ingrediente()
//const limon = new Ingrediente()
//const cocacola = new Ingrediente()
//const setIngredientes = #{}
 
// Clientes -> position? deberia pasar la misma posision de la silla...
const silla = new SillaParaTest(position = game.origin())
const clienteConformista = new ClienteConformista(silla = silla)
const clienteMedio = new ClienteMedio(silla = silla)
const clienteExigente = new ClienteExigente(silla = silla)


// Comienzan los tests sobre las Sillas
describe "Pruebas para la clase Silla y sus herederas" {
	
	test "evaluarEstado() sin cliente y con 100% de probabilidades, debe generar cliente" {
		
		assert.notThat(silla.estaOcupada())
		
		silla.evaluarEstado()
		
		assert.that(silla.cliente().toString().contains("un/a  Cliente"))
	}
	
	test "Si la silla ya tiene un cliente, evaluarEstado() conserva el mismo cliente" {
		
		silla.evaluarEstado()
		
		const cliente = silla.cliente()
		
		silla.evaluarEstado()
		
		assert.that(silla.cliente() === cliente)
	}
	
	test "retirarCliente()" {
		
		console.println(silla.cliente())
		
		silla.evaluarEstado()
		
		console.println(silla.cliente())
		
		assert.that(silla.cliente().toString().contains("un/a  Cliente"))
		
		silla.retirarCliente()
		
		console.println(silla.cliente())
		
		assert.notThat(silla.estaOcupada())
	}
}

//Test para la Sesion
describe "Sesion" {
	test "Al iniciarse, todas sus sillas deben iniciarse y tener un cliente random" {
		const sesion = new SesionParaTest()
		
		sesion.iniciar()
		
		assert.equals(sesion.sillas().size(), 4)
		
		game.schedule(1100, {
			sesion.sillas().forEach({ 
				silla => assert.that(silla.cliente().toString().contains("un/a  Cliente"))
			})
		})
	}
}


// Comienzan los tests sobre los Ingredientes y Coctelera
describe "Ingredientes" {
	test "Iniciliza vacio la cantidad de onzas"{
 		assert.equals("Orange", naranja.text())
 	}
 	test "diferencia de ingredientes" {
 		assert.notThat(naranja.text() == limon.text())
 	}
}
 
describe "Coctelera" {
 	test "Agregar Ingredientes" {
 		coctelera.agregarIngredientes(naranja)
 		coctelera.agregarIngredientes(limon)
 		coctelera.agregarIngredientes(cola)
 		coctelera.agregarIngredientes(naranja)
 		coctelera.agregarIngredientes(limon)
 		coctelera.agregarIngredientes(cola)
 		coctelera.agregarIngredientes(naranja)
 		assert.equals(7, coctelera.ingredientes().size())
		coctelera.agregarIngredientes(naranja)
 		assert.equals(8, coctelera.ingredientes().size())
 		//coctelera.agregarIngredientes(naranja) game.say()
 		assert.equals(8, coctelera.ingredientes().size())
 	}
 	test "Onza"{
 		//No se que probar aca	
 	}
 	
 	test "Limpiar coctelera" {
 		coctelera.agregarIngredientes(naranja)
 		coctelera.agregarIngredientes(limon)
 		coctelera.agregarIngredientes(cola)
 		coctelera.agregarIngredientes(naranja)
 		assert.equals(4, coctelera.ingredientes().size())
 		coctelera.limpiar()
 		assert.that(coctelera.ingredientes().isEmpty())
 	}
 	
 	test "Compara ingredientes" {
 		coctelera.agregarIngredientes(naranja)
 		coctelera.agregarIngredientes(limon)
 		
 		assert.equals([naranja, limon], coctelera.ingredientes())
 	}
 	
}

describe "cliente"{
 	test "cliente conformista"{
 		//inicio
 		//assert.equals(60,clienteConformista.tiempoEspera())
 		assert.equals(45,clienteConformista.tiempoEspera()) //para el test
 		assert.equals(3,clienteConformista.satisfaccion())
 		assert.equals(null, clienteConformista.tragoPedido())
 		
 		//pide un fernet
 		clienteConformista.generarTrago(fernCola)
 		assert.equals(fernCola, clienteConformista.tragoPedido())
 		
 		//recibe fernet y lo verigica //NO SE PRUEBA recibeTrago(unTrago) rompe game.say()
 		assert.that(clienteConformista.verificarTrago(fernCola))
 		//recibe fernetCordobes
 		assert.that(clienteConformista.verificarTrago(fernCordobes))
 		//recibe manhattan
 		assert.notThat(clienteConformista.verificarTrago(manhattan))
 		
 		
 	}
 	
 	test "cliente medio"{
 		//inicio
 		//assert.equals(40,clienteMedio.tiempoEspera())
 		assert.equals(30,clienteMedio.tiempoEspera())
 		assert.equals(3,clienteMedio.satisfaccion())
 		assert.equals(null, clienteMedio.tragoPedido())
 		
 		//pide un fernet
 		clienteMedio.generarTrago(fernCola)
 		assert.equals(fernCola, clienteMedio.tragoPedido())
 		
 		//recibe fernet y lo verigica //NO SE PRUEBA recibeTrago(unTrago) rompe game.say()
 		assert.that(clienteMedio.verificarTrago(fernCola))
 		//recibe fernetCordobes
 		assert.that(clienteMedio.verificarTrago(fernCordobes))
 		//recibe manhattan
 		assert.notThat(clienteMedio.verificarTrago(manhattan))
 		//recibe otro trago
 		const otroTrago = new Trago(ingredientes = [fernulo,fernulo,naranja, naranja, naranja, ron, ron, ron])
		const otroTragoCambioUno = new Trago(ingredientes = [fernulo,naranja,naranja, naranja, naranja, ron, ron, ron])
		const otroTragoCambioDos = new Trago(ingredientes = [fernulo,naranja,naranja, naranja, naranja, naranja, ron, ron])
		const otroTragoCambioTres = new Trago(ingredientes = [fernulo,naranja,naranja, naranja, naranja, naranja, naranja, ron])
		
		clienteMedio.generarTrago(otroTrago)
		assert.that(clienteMedio.verificarTrago(otroTragoCambioUno))
		assert.notThat(clienteMedio.verificarTrago(otroTragoCambioDos))
		assert.notThat(clienteMedio.verificarTrago(otroTragoCambioTres))
 	}
 	
 	test "cliente exigente"{
 		//inicio
 		//assert.equals(10,clienteExigente.tiempoEspera())
 		assert.equals(16,clienteExigente.tiempoEspera()) //para el test
 		assert.equals(3,clienteExigente.satisfaccion())
 		assert.equals(null, clienteExigente.tragoPedido())
 		
 		//pide un fernet
 		clienteExigente.generarTrago(fernCola)
 		assert.equals(fernCola, clienteExigente.tragoPedido())
 		
 		//recibe fernet y lo verigica //NO SE PRUEBA recibeTrago(unTrago) rompe game.say()
 		assert.that(clienteExigente.verificarTrago(fernCola))
 		//recibe fernetCordobes
 		assert.notThat(clienteExigente.verificarTrago(fernCordobes))
 		//recibe manhattan
 		assert.notThat(clienteExigente.verificarTrago(manhattan))
 		//recibe otro trago
 		const otroTrago = new Trago(ingredientes = [fernulo,fernulo,naranja, naranja, naranja, ron, ron, ron])
		const otroTragoCambioUno = new Trago(ingredientes = [fernulo,naranja,naranja, naranja, naranja, ron, ron, ron])
		const otroTragoCambioDos = new Trago(ingredientes = [fernulo,naranja,naranja, naranja, naranja, naranja, ron, ron])
		const otroTragoCambioTres = new Trago(ingredientes = [fernulo,naranja,naranja, naranja, naranja, naranja, naranja, ron])
		
		clienteExigente.generarTrago(otroTrago)
		assert.notThat(clienteExigente.verificarTrago(otroTragoCambioUno))
		assert.notThat(clienteExigente.verificarTrago(otroTragoCambioDos))
		assert.notThat(clienteExigente.verificarTrago(otroTragoCambioTres))
 		
 	}
}

describe "barman"{
	test "cocacola con naranja y limon"{
		
		barman.derecha()
		barman.derecha()
		barman.seleccionar()
		barman.derecha()
		barman.seleccionar()
		barman.izquierda()
		barman.izquierda()
		barman.seleccionar()
		
		//hay que pensarlo
	}
}

describe "propinero"{
	test "propinero"{
		
		assert.equals(0,propinero.dinero())
		propinero.entregarPropina(100)
		assert.equals(100,propinero.dinero())
		const sesion = new SesionParaTest()
		//assert.notThat(propinero.objetivoCumplido())
		
	}
}